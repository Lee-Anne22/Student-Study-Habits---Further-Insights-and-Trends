---
Title: Student Study Habits 
Subtitle: Further Insights and Trends
Author: Lee-Anne van der Merwe
format: ipynb
code-fold: true
jupyter: python3
kernal: base
---

# Data Collection and Preparation

```{python}
!pip install shap
!pip install lime
```

## Collection of Data:

The data collected for this project is provided by Kaggle and thorough preparation of this data were done for machine learning models.

```{python}
#Importing all necessary programs
def import_study_libs():
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib.pyplot as plt
    import sklearn as sk
    from sklearn.model_selection import train_test_split
    from sklearn.model_selection import GridSearchCV
    from sklearn.model_selection import StratifiedKFold
    from sklearn.tree import DecisionTreeClassifier
    from sklearn.tree import plot_tree
    from sklearn.metrics import accuracy_score
    from sklearn.metrics import confusion_matrix
    from sklearn.metrics import classification_report
    from sklearn.metrics import make_scorer
    import lime as lime
    import shap as shap
    return {"np": np, "pd": pd, "plt": plt, "train_test_split": train_test_split, "GridSearchCV": GridSearchCV, "StratifiedKFold": StratifiedKFold,
            "DecisionTreeClassifier": DecisionTreeClassifier, "accuracy_score": accuracy_score, "confusion_matrix": confusion_matrix,
            "classification_report":classification_report, "make_scorer": make_scorer}

# Loading the data set
file= "student_habits_performance.csv"
def load_study_data():
    try:
        libs= import_study_libs()
        pd= libs["pd"]
        df= pd.read_csv(file, sep=';')
        df.columns=df.columns.str.strip() #To clean up data
        print ("Data Loaded Succesfully!")
        return df
    except FileNotFoundError:
        print (f"File not found!: {file}")
        return None
        
```

## Preparation of Data:

Data is prepped by removing missing values, selecting the age range, encoding categorical values and normalising numeric variables.

```{python}
# Handle missing Values and duplicates:
def study_clean():
    df = load_study_data()
    if df is None:
        return None  # Exit early if loading failed

    libs = import_study_libs()
    pd = libs["pd"]
    np = libs["np"]

    print(f"Data size:\n{df.head()}\n")
    print(f"Data shape: {df.shape}\n")
    print(f"Data Statistics:\n{df.describe()}\n")

    df_missing = df.fillna(df.mean(numeric_only=True))
    df_duplicates = df_missing.drop_duplicates()

    df_clean = df_duplicates[
        (df_duplicates["sleep_hours"] + df_duplicates["social_media_hours"] +
         df_duplicates["netflix_hours"] + df_duplicates["study_hours_per_day"] <= 24) &
        (df_duplicates["sleep_hours"] >= 0) &
        (df_duplicates["age"].between(16, 24))
    ]

    print("Data preprocessed and cleaned!")
    return df_clean
    

```

# Data Exploration and Model Building

## Statistical Analysis:

The data was first explored by applied statistical in three ways:

-   Mean study time by Health Tier

-   Correlation between sleep and exam scores

-   Outlier detection

```{python}
# Statistical Analysis
def stats():
    data= study_clean()
    df=data["df_clean"]
    #Get data statistical analysis after cleaning
    return data.describe()


```

## Data Exploration:

Data were explored and the following plots were obtained:

-   Scatter plot

    -   The correlation between exam score and internet quality, sleep hours and exercise frequency

-   Stacked bar plot

    -   The difference in categories between the following age groups: 16-18 years, 19-20 years, 21-22 years and 23-24 years.

-   Box/Violin plots

    -   Mental Health rating per age group: 16-18 years, 19-20 years, 21-22 years and 23-24 years.

-   Heatmaps

    -   To gain multivariate insights between categories

-   Parallel Coordinates plots

    -   

-   Radar Charts

    -   The difference in time spent between the following age groups: 16-18 years, 19-20 years, 21-22 years and 23-24 years.

        -   Amount of study hours - study hours

        -   Amount of time spent on social media - social media hours

        -   Amount of time spent on Netflix - netflix hours

        -   Amount of time spent on sleep - sleep hours

```{python}
def Scatterplots():
    data= study_clean()
    df= data["df_clean"]
    libs = import_study_libs()
    plt= libs["plt"]
    sns= libs["sns"]
# Scatter plot : Subplot (1) Exam score vs Internet Quality
    plt.figure(figsize=(15,8), facecolor='c')
    sns.set_style("whitegrid")
    x=df["Internet_Quality"]
    y=df["exam_score"]
    plt.subplot (2,3,1) # creating the plot
    ax.set_xlabel("internet_quality")
    ax.set_ylabel("exam_score")
    ax.plot(x,y,)
    ax.set_title("Exam Score VS Internet Quality", fontsize=12)
    fig.tight
    plt.show
    from Ipython.display import Image
    fig.savefig('ExamScore_vs_InternetQuality.png') #saving plot as png

    # Subplot(2) Exam score vs Sleep
    x=df["sleep_hours"]
    y=df["exam_score"]
    plt.subplots(2,3,2) # creating the plot
    ax.set_xlabel("Sleep Hours")
    ax.set_ylabel("Exam Score")
    ax.plot(x,y,"dark blue")
    ax.set_title("Exam Scores VS Sleep Hours", fontsize=12)
    fig.tight
    plt.show
    from Ipython.display import Image
    fig.savefig('ExamScore_vs_Sleep.png') #saving plot as png

    # Subplot (3): Exam score vs Exercise Frequency
    x=df["exercise_frequency"]
    y=df["exam_score"]
    plt.subplots(2,3,3) # creating the plot
    ax.set_xlabel("Exercise Frequency")
    ax.set_ylabel("Exam Score")
    ax.plot(x,y,"dark blue")
    ax.set_title("Exam Scores VS Exercise Frequency", fontsize=12)
    fig.tight
    plt.show
    from Ipython.display import Image
    fig.savefig('ExamScore_vs_Sleep.png') #saving plot as png

```

```{python}
#Stacked bar plot1: Difference in age groups

```

```{python}
#Violin plot: Mental Health rating per age group: 16-18 years, 19-20 years, 21-22 years and 23-24 years
```

```{python}
#Heatmap
```

```{python}
#Parallel Coordinates plot
```

```{python}
#Radar Charts
```

```{python}
#calling all functions
def main():
    functions= [import_study_libs, load_study_data, study_clean] 
    for func in functions:
        func()

if __name__== '__main__':
    main()
```

## Model Building:

The linear regression model and decision tree model were trained for this project:

##### Linear Regression Model

The following categories were considered in the linear regression model:

-   Study hours
-   Sleep hours
-   Social Media hours
-   Netflix hours
-   Exercise frequency
-   Predicted Exam Score

The categories expected to be most profitable were increased to predict the impact on exam score. These categories were: sleep hours, study hours and exercise frequency.

```{python}

```

##### Decision Tree

A decision tree was utilised to predict whether a student would obtain an exam score above 75% or not.

#Note to self: Need to change the following categories:

-   part-time -\> 0 or 1 (binary class)

-   diet quality (multi-class)

-   parental education (multi-class)

-   internet quality (multi-class)

-   extracurricular activity -\> 0 or 1 (binary class)

```{python}

```